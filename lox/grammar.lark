?start     : program

program    : declaration*

declaration    : var_dec
              | function_dec
              | stmt

function_dec   : "fun" VAR "(" parameters? ")" block

parameters     : VAR ("," VAR)*

?stmt      : expr_stmt
           | print_cmd
           | if_cmd
           | for_cmd
           | while_cmd 
           | block
           | return_cmd

for_cmd    : "for" "(" for_init for_cond ";" for_incr ")" stmt

for_init   : var_dec
           | expr_stmt
           | ";"

for_cond   : expr?
for_incr   : expr?

if_cmd     : "if" "(" expr ")" stmt ("else" stmt)?

while_cmd  : "while" "(" expr ")" stmt

print_cmd  : "print" expr ";"

return_cmd : "return" expr? ";"

 expr_stmt : expr ";" 

// EXPRESSÃ•ES

block      : "{" declaration* "}"

?expr      : assignment

var_dec    : "var" VAR ("=" expr)? [";"]

?assignment: attr "=" assignment   -> setattr
           | VAR "=" assignment    -> assign
           | logic_or

?logic_or  : logic_or "or" logic_and   -> or_
           | logic_and

?logic_and : logic_and "and" test      -> and_
           | test

?test      : test "==" cmp  -> eq
           | test "!=" cmp  -> ne
           | cmp

?cmp       : cmp ">" factor   -> gt
           | cmp "<" factor   -> lt
           | cmp ">=" factor  -> ge
           | cmp "<=" factor  -> le
           | factor

?factor    : factor "+" term  -> add
           | factor "-" term  -> sub
           | term

?term      : term "*" atom   -> mul
           | term "/" atom   -> div 
           | atom

?attr      : atom ("." VAR)+  -> getatributo   

?atom      : call           
           | attr
           | NUMBER 
           | BOOL
           | VAR
           | STRING
           | NIL
           | "(" cmp ")"
           |"!" atom         -> not_
           | "-" atom         -> neg

call       : atom "(" params ")" 
params     : [ expr ("," expr )* ]

BOOL.2     : "true" | "false"
VAR.1      : /[a-z_]\w*/
NUMBER     : /([1-9][0-9]*|0)(\.[0-9]+)?/ 
STRING     : /"[^"]*"/
NIL.2      : "nil"
COMMENT    : "//" /[^\n]*/

%ignore /\s/ | COMMENT
